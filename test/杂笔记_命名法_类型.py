# 注意：python和c语言不同的是python定义变量时不用指明他的类型，而且其末尾不用打；分号

'''
多行注释
'''

'''
python中pass的作用
pass主要作用就是占位，让代码整体完整。如果定义一个函数执行部分为空或一个
判断语句写好了之后还没想好满足条件需要执行的内容，后期才会使用，但是由于
没有填写执行内容函数和判断就会报错，这种情况就可以用pass来进行填坑,下面通过案例详细介绍一下

当你在编写一个程序时，执行语句部分思路还没有完成，这时你可以用pass语句来占位，也可以当做是一个标记，是要过后来完成的代码
定义一个函数iplaypython，但函数体部分暂时还没有完成，又不能空着不写内容，因此可以用pass来替代占个位置

def iplaypython():
    pass


2. pass语句在循环中的作用
pass也常用于为复合语句编写一个空的主体，比如说你想一个while语句的无限循环，每次迭代时不需要任何操作，你可以这样写：

while true
    pass

现实中最好不要写这样的代码，因为执行代码块为pass也就是空什么也不做，这时python会进入死循环
'''

# a = 10
# print(a)
# print(type(a))  # type：用来判断里面的数据是什么类型
# a = "李振辉"
# print(type(a))  # python中的类型是随着，变量里面存的值而改变的。
#
# b = ()  # 元组类型  tuple
# print(type(b))
# c = []  # 列表类型  list
# print(type(c))
# d = {}  # 字典类型   dict
# print(type(d))
#
# # 命名规范
# UserName = "李明"  # 大驼峰命名法
# userName = "李明"  # 小驼峰命名法
# user_name = "李明"  # 下划线命名法
#
# # 注意：python里面加的地板除法运算符：x//y 结果是忽略小数点后面的小数位，只保留整数位
#
#
# #Ctrl+鼠标左键，进入说明文档

# age =20
# sex="male"
# print("我的年龄为:%d性别为：%s"%(age,sex))
# print("我的年龄为:",age,"性别为:",sex)  #这样打印出来会有空格


# print(hex(10))
# hex方法将10进制转为十六进制
# oct()方法将10进制转换为八进制
# bin()方法将10进制转换为二进制
# python里面的int整数类型也是32位4个字节，开辟连续的内存空间
# 在 Python 中，所有的对象都存活在系统堆上。也就是说，如果没有特殊的机制，对于频繁使用的小整数对象，
# Python将一次又一次地使用 malloc 在堆上申请空间，同时又会不厌其烦地一次次 free。这样的操作极大降低
# 了运行效率，而且还会在系统堆上造成大量的内存碎片，严重影响 Python 的整体性能。于是对于小整数使用了对
# 象池技术，PyLongObject 对象是不可变对象，意味着对象池里的每一个 PyLongObject 对象都能被任意地共享。
#
# 小整数和大整数的分界点在哪里？Python 提供了一种方法，用户可以调整小整数和大整数的分界点，从而动态确定
# 小整数对象池中到底应该有多少个小整数对象。但是 Python 提供的这种方法非常原始，为了达到动态调整的目的，
# 只有修改源代码，然后重新编译出新的 Python 来。
# 在 pycore_global_objects.h 文件中，这个毫不起眼的 small_ints 就是举足轻重的小整数对象的对象池。
# 小整数集合的范围默认设定为[-5, 256]，但是你完全可以修改 NSMALLPOSINTS 和 NSMALLNEGINTS，
# 重新编译 Python，从而将这个范围向两端伸展或收缩。
#
# 对小整数对象，Python 直接将这些整数对应的 PyLongObject 缓存在内存中，并将其指针存放在 small_ints 中。

#整数缓存区































